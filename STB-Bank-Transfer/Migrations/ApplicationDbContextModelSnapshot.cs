// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using STB_Bank_Transfer.Data;

#nullable disable

namespace STB_Bank_Transfer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("STB_Bank_Transfer.Models.Banquier", b =>
                {
                    b.Property<int>("IdBanquier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBanquier"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdBanquier");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Banquiers");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdClient"));

                    b.Property<int>("BanquierId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("IdCompte")
                        .HasColumnType("integer");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdClient");

                    b.HasIndex("BanquierId");

                    b.HasIndex("IdCompte")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Compte", b =>
                {
                    b.Property<int>("IdCompte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCompte"));

                    b.Property<int>("BanquierId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeCompte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdCompte");

                    b.HasIndex("BanquierId");

                    b.HasIndex("ClientId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Operation", b =>
                {
                    b.Property<int>("IdOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOperation"));

                    b.Property<int>("CompteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Montant")
                        .HasColumnType("numeric");

                    b.Property<string>("NumCompte")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOperation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdOperation");

                    b.HasIndex("CompteId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Virement", b =>
                {
                    b.Property<int>("IdVirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVirement"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdCompte")
                        .HasColumnType("integer");

                    b.Property<decimal>("Montant")
                        .HasColumnType("numeric");

                    b.Property<string>("Motif")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumCompteDestination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumCompteSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RaisonRejet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.HasKey("IdVirement");

                    b.HasIndex("IdCompte");

                    b.ToTable("Virements");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Client", b =>
                {
                    b.HasOne("STB_Bank_Transfer.Models.Banquier", "Banquier")
                        .WithMany()
                        .HasForeignKey("BanquierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STB_Bank_Transfer.Models.Compte", "CompteS")
                        .WithOne()
                        .HasForeignKey("STB_Bank_Transfer.Models.Client", "IdCompte")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banquier");

                    b.Navigation("CompteS");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Compte", b =>
                {
                    b.HasOne("STB_Bank_Transfer.Models.Banquier", "Banquier")
                        .WithMany()
                        .HasForeignKey("BanquierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STB_Bank_Transfer.Models.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banquier");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Operation", b =>
                {
                    b.HasOne("STB_Bank_Transfer.Models.Compte", "Compte")
                        .WithMany("HistoriqueOperations")
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Virement", b =>
                {
                    b.HasOne("STB_Bank_Transfer.Models.Compte", "Comptes")
                        .WithMany()
                        .HasForeignKey("IdCompte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Client", b =>
                {
                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("STB_Bank_Transfer.Models.Compte", b =>
                {
                    b.Navigation("HistoriqueOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
